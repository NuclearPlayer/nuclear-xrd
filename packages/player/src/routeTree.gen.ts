/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ThemesRouteImport } from './routes/themes'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as PluginsRouteImport } from './routes/plugins'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ArtistProviderIdArtistIdRouteImport } from './routes/artist/$providerId/$artistId'
import { Route as AlbumProviderIdAlbumIdRouteImport } from './routes/album/$providerId/$albumId'

const ThemesRoute = ThemesRouteImport.update({
  id: '/themes',
  path: '/themes',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const PluginsRoute = PluginsRouteImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistProviderIdArtistIdRoute =
  ArtistProviderIdArtistIdRouteImport.update({
    id: '/artist/$providerId/$artistId',
    path: '/artist/$providerId/$artistId',
    getParentRoute: () => rootRouteImport,
  } as any)
const AlbumProviderIdAlbumIdRoute = AlbumProviderIdAlbumIdRouteImport.update({
  id: '/album/$providerId/$albumId',
  path: '/album/$providerId/$albumId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/themes': typeof ThemesRoute
  '/album/$providerId/$albumId': typeof AlbumProviderIdAlbumIdRoute
  '/artist/$providerId/$artistId': typeof ArtistProviderIdArtistIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/themes': typeof ThemesRoute
  '/album/$providerId/$albumId': typeof AlbumProviderIdAlbumIdRoute
  '/artist/$providerId/$artistId': typeof ArtistProviderIdArtistIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/plugins': typeof PluginsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/themes': typeof ThemesRoute
  '/album/$providerId/$albumId': typeof AlbumProviderIdAlbumIdRoute
  '/artist/$providerId/$artistId': typeof ArtistProviderIdArtistIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/plugins'
    | '/search'
    | '/settings'
    | '/themes'
    | '/album/$providerId/$albumId'
    | '/artist/$providerId/$artistId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/plugins'
    | '/search'
    | '/settings'
    | '/themes'
    | '/album/$providerId/$albumId'
    | '/artist/$providerId/$artistId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/plugins'
    | '/search'
    | '/settings'
    | '/themes'
    | '/album/$providerId/$albumId'
    | '/artist/$providerId/$artistId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  PluginsRoute: typeof PluginsRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  ThemesRoute: typeof ThemesRoute
  AlbumProviderIdAlbumIdRoute: typeof AlbumProviderIdAlbumIdRoute
  ArtistProviderIdArtistIdRoute: typeof ArtistProviderIdArtistIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/themes': {
      id: '/themes'
      path: '/themes'
      fullPath: '/themes'
      preLoaderRoute: typeof ThemesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugins': {
      id: '/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist/$providerId/$artistId': {
      id: '/artist/$providerId/$artistId'
      path: '/artist/$providerId/$artistId'
      fullPath: '/artist/$providerId/$artistId'
      preLoaderRoute: typeof ArtistProviderIdArtistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/album/$providerId/$albumId': {
      id: '/album/$providerId/$albumId'
      path: '/album/$providerId/$albumId'
      fullPath: '/album/$providerId/$albumId'
      preLoaderRoute: typeof AlbumProviderIdAlbumIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  PluginsRoute: PluginsRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  ThemesRoute: ThemesRoute,
  AlbumProviderIdAlbumIdRoute: AlbumProviderIdAlbumIdRoute,
  ArtistProviderIdArtistIdRoute: ArtistProviderIdArtistIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
